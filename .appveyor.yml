version: '{branch}-{build}'

init:
  # Create our AppVeyor version
  - ps: $env:commit = $env:appveyor_repo_commit.SubString(0,7)
  - ps: Update-AppveyorBuild -Version ("{0}-{1}-{2}" -f $env:appveyor_repo_branch,$env:appveyor_build_number,$env:commit )

os: Visual Studio 2017

environment:
  matrix:
    - MSVC_VERSION: 17
      RUNTIME_LINKAGE: static
      QT_VERSION: 5.12.1
      QT_LINKAGE: static
      COVERITY_BUILD_CANDIDATE: True
      QTDIR: C:\Qt\%QT_VERSION%\msvc2017_64
      OPENSSLDIR: C:\OpenSSL-Win32
      VCLIBS: VCRUNTIME140.dll MSVCP140.dll

configuration:
  - release
  - debug

install:
  # Set some vars
  - '%QTDIR%\bin\qtenv2.bat'
  - pip install jinja2
  - qmake -v
  - set VCLIBDIR=%WINDIR%\SysWOW64 # Find vclibs
  - set QTDIR
  - if %QTDIR:_64=%==%QTDIR% ( set ARCH=x86 ) else set ARCH=x64
  - if %QTDIR:msvc=%==%QTDIR% g++ --version
  - if %QTDIR:msvc=%==%QTDIR% set make=mingw32-make.exe
  - if %QTDIR:msvc=%==%QTDIR% %make% --version
  - ps: >-
        if("$QTDIR" -like "*msvc2017*") {
            if(%ARCH% -eq x64) {
                call "%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat";
                echo "64";
            } else {
                call "%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat";
                echo "32";
            }
        } elseif("$QTDIR" -like "*msvc*") {
            call "%ProgramFiles(x86)%\Microsoft Visual Studio %VSVER%\VC\vcvarsall.bat" %ARCH%;
            echo "msvc arch";
        }

  - if not %QTDIR:msvc=%==%QTDIR% set make=nmake.exe
  - if not %QTDIR:msvc=%==%QTDIR% %make% /? > nul
  # Travis and appveyor does not have compatible names to continuous release
  # - If building a tag: Upload the build using the tag name
  # - When building master: Upload the build to the continuous tag
  # - When building a branch: Upload using the branch name
  - if %APPVEYOR_REPO_TAG%==true (set RELEASE_NAME=%APPVEYOR_REPO_TAG_NAME%) else set RELEASE_NAME=continuous-%APPVEYOR_REPO_BRANCH%
  - if %RELEASE_NAME%==master (set RELEASE_NAME=continuous)

before_build:
  # Prepare the out-of-source build directory.
  - echo "RELEASE_NAME:" %RELEASE_NAME%
  - cd %APPVEYOR_BUILD_FOLDER%
  - git submodule init
  - git submodule update
  - cmd: >-
        if %CONFIGURATION% == debug (
            appveyor DownloadFile https://transfer.sh/jJkJw/drkonqi.zip -FileName drkonqi.zip &
            7z x -y -r drkonqi.zip -o%APPVEYOR_BUILD_FOLDER% &
            mv %APPVEYOR_BUILD_FOLDER%/drkonqi2 %APPVEYOR_BUILD_FOLDER%/drkonqi &
        )

  - mkdir %APPVEYOR_BUILD_FOLDER%-build
  - qmake -o %APPVEYOR_BUILD_FOLDER%-build -r -Wall -Wlogic -Wparser CONFIG+=%CONFIGURATION% %APPVEYOR_BUILD_FOLDER%

build_script:
  # Compile it and check for .exe
  - cd %APPVEYOR_BUILD_FOLDER%-build
  - '%make%'
  - dir /b /s *.exe

after_build:
  # Add a link to the build output within the source directory. This is needed because AppVeyor does
  # not support extracting artifacts from out-of-source build directories. See 'artifacts' below.
  - dir /b /s *.exe
  - mkdir deploy
  - cmd: >-
        if %CONFIGURATION% == debug (
            xcopy /E /Y "%APPVEYOR_BUILD_FOLDER%-build\%CONFIGURATION%" "./deploy"
        ) else (
            copy "%APPVEYOR_BUILD_FOLDER%-build\%CONFIGURATION%\pingviewer.exe" "./deploy/pingviewer.exe"
        )

  - windeployqt --qmldir %APPVEYOR_BUILD_FOLDER%/qml --%CONFIGURATION% deploy/pingviewer.exe --verbose=2
  - for %%I in (%VCLIBS%) do copy %VCLIBDIR%\%%I deploy\
  # windeployqt do not deploy openssl binaries
  - copy %OPENSSLDIR%\*.dll deploy\
  - appveyor DownloadFile https://github.com/bluerobotics/stm32flash-code/releases/download/continuous/stm32flash.exe -FileName deploy/stm32flash.exe
  - if %CONFIGURATION% == debug xcopy /E /Y "%APPVEYOR_BUILD_FOLDER%/drkonqi" "./deploy"
  - 7z a -tzip pingviewer_%CONFIGURATION%.zip deploy -r
  - copy %APPVEYOR_BUILD_FOLDER%-build\pingviewer_%CONFIGURATION%.zip %APPVEYOR_BUILD_FOLDER%\pingviewer_%CONFIGURATION%.zip
  - dir /b /s *.zip

artifacts:
  - path: pingviewer_%CONFIGURATION%.zip
    name: PingViewer

deploy:
  - provider: GitHub
    tag: $(RELEASE_NAME)
    release: $(RELEASE_NAME)
    artifact: PingViewer
    draft: false
    prerelease: true
    auth_token:
      secure: VEF0yQnbTywsc88aRTZH8e1/Z0M7qf2txtidiB43qrSFTvrE/2nAQzGx+eqCBb9p

  - provider: S3
    access_key_id: AKIAI42TETMLX6KJRTRA
    secret_access_key:
      secure: H+6JLuM6RmVdlzvYZ92+E1+NB/Z4580IDd8m2wNCbSpFhzSewGtVk3M2AkjKTlCG
    bucket: downloads.bluerobotics.com
    region: us-east-1
    set_public: true
    folder: PingViewer/builds/$(RELEASE_NAME)
    artifact: PingViewer